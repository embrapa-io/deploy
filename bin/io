#!/usr/bin/env bash

echo ""

echo "A command line utility to assist in deploying and updating Embrapa I/O apps."
echo "For detailed info, access: https://embrapa.io/docs/releaser/"

if [ ! -d "/data" ]; then
  echo ""

  echo "Critical! You need to mount volume data! Correct command to use this image is:"
  echo "docker run --name releaser -v $$(pwd):/data -d releaser"

  exit 1
fi

if [ ! -f "/data/.env" ]; then
  while
    echo ""

    echo "Warning! Environment variables file (.env) not found!"
    echo "Please, enter with required info..."

    echo ""

    read -p "Server name (e.g., foo.example.com): " server

    echo ""

    while
      PS3="Container orchestrator: "

      select orchestrator in DockerCompose DockerSwarm
      do
        break
      done
      [[ -z $orchestrator || $orchestrator != @(DockerCompose|DockerSwarm) ]]
    do true; done

    echo ""

    echo "Go to https://git.embrapa.io and, in your profile, generate a new Access Token with 'read_api' scope."
    read -p "GitLab token: " token

    echo ""

    read -p "SMTP host (e.g., smtp.gmail.com): " smtp_host

    while
      read -p "SMTP port (e.g., 25): " smtp_port
      [[ -z $smtp_port || $smtp_port == *[^0-9]* ]]
    do true; done

    read -p "SMTP secure (y/n): " smtp_secure
    read -p "SMTP user (e.g., you@gmail.com): " smtp_user
    read -p "SMTP password: " smtp_password

    if [ "$smtp_secure" != "${smtp_secure#[Yy]}" ]; then
      smtp_secure="yes"
    else
      smtp_secure="no"
    fi

    echo ""

    read -p "e-Mail to log: " email

    echo ""

    echo "Please check the value of each configuration variable and confirm:"

    echo ""

    out="SERVER=${server//[[:space:]]/}"$'\n'
    out+="ORCHESTRATOR=$orchestrator"$'\n'
    out+="GITLAB_TOKEN=${token//[[:space:]]/}"$'\n'
    out+="SMTP_HOST=${smtp_host//[[:space:]]/}"$'\n'
    out+="SMTP_PORT=${smtp_port//[^0-9]/}"$'\n'
    out+="SMTP_SECURE=$smtp_secure"$'\n'
    out+="SMTP_USER=${smtp_user//[[:space:]]/}"$'\n'
    out+="SMTP_PASS=${smtp_pass//[[:space:]]/}"$'\n'
    out+="LOG_MAIL=${email//[[:space:]]/}"

    echo "$out"

    echo ""

    read -p "Is correct? (y/n): " confirm

    [[ -z $confirm || "$confirm" == "${confirm#[Yy]}" ]]
  do true; done

  echo "$out" > /data/.env

  echo ""

  echo "Note: A '.env' file has been created in volume directory shared with the container. To change values in the future, edit this file."
fi

export $(cat /data/.env)

if [ ! -f "/root/.ssh/id_rsa" ]; then
  echo ""

  echo "Warning! Looks like the SSH Key to GitLab access is missing."

  echo ""

  if [ ! -f "/data/ssh" ]; then
    echo "Generating new SSH key pair..."

    ssh-keygen -o -t rsa -b 4096 -N '' -C '' -f /data/ssh
  else
    echo "An SSH private key already exists in the volume directory shared with the container. This key will be restored."
  fi

  if [ ! -f "/data/ssh.pub" ]; then
    echo "Generating a new SSH public key from private key..."

    ssh-keygen -y -f /data/ssh > /data/ssh.pub
  fi

  echo ""

  echo "Configuring SSH private key in container environment..."

  mkdir -p /root/.ssh
  cp /data/ssh /root/.ssh/id_rsa
  chmod 600 /root/.ssh/id_rsa
  ssh-add /root/.ssh/id_rsa
  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

  echo ""

  echo "Done! Please, access GitLab (https://git.embrapa.io) and, in your profile, add a new SSH with follow content:"

  echo ""

  cat /data/ssh.pub

  echo ""

  echo "Note: SSH key pair is available on the volume directory shared with the container."
fi

if [ ! -f "/data/builds.json" ]; then
  echo ""

  echo "Warning! The builds are not configured yet (file 'builds.json' is missing)."

  echo ""

  echo "Please enter some builds comma separated, e.g.:"
  echo "project-a/app1@beta,project-b/web@release,project-a/app2@alpha"

  echo ""

  while
    read -p "Builds: " input
    [[ -z $input || $input =~ [^a-z0-9,-/@\ ] ]]
  do true; done

  builds=$(echo $input | tr "," "\n")

  count=0
  unset array

  sentry=$(jq -n \
    --arg dsn "" \
    '$ARGS.named')

  matomo=$(jq -n \
    --argjson id 0 \
    --arg token "" \
    '$ARGS.named')

  auto=$(jq -n \
    --argjson deploy true \
    --argjson backup true \
    --argjson sanitize true \
    '$ARGS.named')

  for build in $builds
  do
    echo "try [$build]"

    if [[ ! $build =~ [[:space:]]*([a-z0-9][a-z0-9-]+[a-z0-9])\/([a-z0-9][a-z0-9-]+[a-z0-9])@((alpha)|(beta)|(release))[[:space:]]* ]]; then
      echo "The build format for '$build' is incorrect! It will be ignored."

      continue
    fi

    array[$count]=$(jq -n \
      --arg project ${BASH_REMATCH[1]} \
      --arg app ${BASH_REMATCH[2]} \
      --arg stage ${BASH_REMATCH[3]} \
      --argjson team "[]" \
      --argjson sentry "$sentry" \
      --argjson matomo "$matomo" \
      --argjson auto "$auto" \
      '$ARGS.named')

    folder="${BASH_REMATCH[1]}_${BASH_REMATCH[2]}_${BASH_REMATCH[3]}"

    mkdir -p /data/settings/$folder

    echo "" > /data/settings/$folder/.env

    ((count++))
  done

  if (( ${#array[@]} == 0 )); then
    echo "Warning! No one build could be configured. Try again or manually create the 'builds.json' file in the volume directory shared with the container."

    exit 1
  fi

  concat=$(IFS=","; echo "${array[*]}")

  final=$(echo "[$concat]" | jq -s '.[]')

  echo "$final" > /data/builds.json

  echo "Done! 'builds.json' file has been created in volume directory shared with the container."
  echo "Now, you need to complete this file with e-mails of your team members, Sentry DSN and Matomo ID/Token, for each build."
  echo "Furthermore, you need to configure '.env' file for each build in 'settings' folder, inside volume directory."
fi

echo ""

/usr/local/bin/php /app/run.php "${@:1}"

echo $'\n'
